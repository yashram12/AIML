from collections import deque
class Graph:
    def __init__(self,adjoc_lis):
        self.adjoc_lis=adjoc_lis
    def get_Neighbours(self,n):
        return self.adjoc_lis[n]
    def h(self,n):
        H={
            'A':1,
            'B':1,
            'C':1,
            'D':0}
        return H[n]
    def a_star(self,start,stop):
        open_lst=set([start])
        cls_lst=set([])
        dint={}
        dint[start]=0
        prenode={}
        prenode[start]=start
        while len(open_lst)>0:
            n=None
            for v in open_lst:
                
                if n==None or dint[v]+self.h(v)<dint[n]+self.h(n):
                    n=v
            if n==None:
                print("path does not exist")
                return None
            if n==stop:
                recons_path=[]
                while prenode[n]!=n:
                    recons_path.append(n)
                    n=prenode[n]
                recons_path.append(start)
                recons_path.reverse()
                print("path found: {} ".format(recons_path))
                return recons_path
            for (m,weight)in self.get_Neighbours(n):
                if m not in open_lst and m not in cls_lst:
                    open_lst.add(m)
                    prenode[m]=n
                    dint[m]=dint[n]+weight
                else:
                    if dint[m]>dint[n]+weight:
                        dint[m]=dint[n]+weight
                        prenode[m]=n
                        if m in cls_lst:
                            cls_lst.remove(m)
                            open_lst.add(m)
            open_lst.remove(n)
            cls_lst.add(n)
        print("path does not exist")
        return None           
adjoc_lis = {'A':[('B',1),('C',3),('D',7)],'B':[('D',5)],'C':[('D',12)]}
graph1=Graph(adjoc_lis)
graph1.a_star('A', 'D')